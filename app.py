# -*- coding: utf-8 -*-
"""Students score Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/186RjkzCMML8GTD422Izkk4SuXXBg_EWQ
"""

#importing the libraries
import streamlit as slt #ml and ds scipts to web app
import pandas as pd #for data manipulation
import matplotlib.pyplot as plt #for data visualization
from sklearn.model_selection import train_test_split #for splitting the dataa
from sklearn.linear_model import LinearRegression #to train the model
from sklearn.metrics import mean_squared_error,r2_score #to calculate the results

slt.title("Student Exam Score Predictor")
#upload csv file
uploaded_file=slt.file_uploader("Upload your CSV file",type=["csv"])
if uploaded_file is not None:
  #reading the csv file
  df=pd.read_csv(uploaded_file)
  slt.subheader("Raw Data")
  slt.write(df.head())
  #removing missing values...
  df=df.dropna()
  #converting the categorical values into multiple binary values
  df=pd.get_dummies(df,drop_first=True)
  #assigning the inputs(features) and the output
  x=df.drop('exam_score',axis=1)
  y=df['exam_score']
  #splitting the training and testing dataset
  x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
  #creating an instance for linear regression model
  model=LinearRegression()
  #loading thr training dataset to the model
  model.fit(x_train,y_train)
  #predicting the scores with the testing data
  y_pred=model.predict(x_test)
  slt.subheader("Prediction Results")
  #comparing the actual scores vs predicted scores
  comparison_df = pd.DataFrame({
    'Actual Score': y_test.values,
    'Predicted Score': y_pred
  })
  #printing the first 10 values
  slt.write(comparison_df.head(10))
  #printing the mean squared error value
  slt.write("MSE :",mean_squared_error(y_test,y_pred))
  #printing the r2 score value
  slt.write("R2 score :",r2_score(y_test,y_pred))
  #plotting the actual values with predicted values using scatter plot
  slt.subheader("Actual vs Predicted Scores")
  fig,ax=plt.subplots()
  ax.scatter(y_test,y_pred)
  ax.set_xlabel("Actual Scores")
  ax.set_ylabel("Predicted Scores")
  ax.set_title("Student's Score Prediction")
  slt.pyplot(fig)